{"version":3,"sources":["ItemList.js","Budget.js","App.js","serviceWorker.js","index.js"],"names":["ItemList","props","className","name","map","ind","itemNameState","itemNumberState","key","Button","variant","onClick","delFun","total","Budget","listArray","useState","setName","setNumber","itemTotalState","setTotal","itemArrayState","setArray","Form","onSubmit","e","preventDefault","Number","Row","Col","Control","placeholder","value","onChange","target","required","type","num","id","filter","_","i","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mQA+BeA,MA5Bf,SAAkBC,GACd,OACI,wBAAIC,UAAU,0BACV,wBAAIA,UAAU,qDACX,yBAAKA,UAAU,OAAf,aACA,yBAAKA,UAAU,OAAf,UACA,yBAAKA,UAAU,OAAf,UAEFD,EAAME,KAAKC,KAAI,WAAkCC,GAAlC,IAAEC,EAAF,EAAEA,cAAcC,EAAhB,EAAgBA,gBAAhB,OACjB,wBAAIC,IAAKH,EAAKH,UAAU,wEACpB,yBAAKA,UAAU,OAAOI,GACtB,yBAAKJ,UAAU,OAAOK,GACtB,yBAAKL,UAAU,OAAM,kBAACO,EAAA,EAAD,CAAQP,UAAU,OACtCQ,QAAQ,SACRC,QAAS,kBAAIV,EAAMW,OAAOL,EAAgBF,KAFtB,UAOzB,wBAAIH,UAAU,6CACV,yBAAKA,UAAU,QACf,yBAAKA,UAAU,QAC1B,yBAAKA,UAAU,mBAAmBD,EAAMY,UCgC7BC,MApDf,WACI,IAGMC,EAAW,GAJH,EAKkBC,mBAJT,IADT,mBAKPV,EALO,KAKQW,EALR,OAMsBD,mBAJd,IAFR,mBAMPT,EANO,KAMUW,EANV,OAOoBF,mBAJb,GAHP,mBAOPG,EAPO,KAOSC,EAPT,OAQoBJ,mBAASD,GAR7B,mBAQPM,EARO,KAQSC,EART,KA0Bd,OACI,yBAAKpB,UAAU,qDACvB,kBAACqB,EAAA,EAAD,CAAMrB,UAAU,gBAAgBsB,SAnBX,SAACC,GAChBnB,GAAeC,GAAiBe,EAAS,GAAD,mBAAKD,GAAL,CAAoB,CAACf,gBAAcC,sBAC3EkB,EAAEC,iBACFT,EAXqB,IAYrBC,EAXoB,IAYpBE,EAASD,EAAeQ,OAAOpB,MAenC,kBAACgB,EAAA,EAAKK,IAAN,KACE,kBAACC,EAAA,EAAD,KACE,kBAACN,EAAA,EAAKO,QAAN,CAAcC,YAAY,YAAYC,MAAO1B,EAAe2B,SAAU,SAAAR,GAAC,OAAER,EAAQQ,EAAES,OAAOF,QAAQG,UAAQ,KAE5G,kBAACN,EAAA,EAAD,KACE,kBAACN,EAAA,EAAKO,QAAN,CAAcC,YAAY,QAAQC,MAAOzB,EAAiB0B,SAAU,SAAAR,GAAC,OAAEP,EAAUO,EAAES,OAAOF,QAASI,KAAK,SAASD,UAAQ,KAE1H,kBAAC1B,EAAA,EAAD,CAAQC,QAAQ,UAAU0B,KAAK,UAA/B,SAML,yBAAKlC,UAAU,YAAW,kBAAC,EAAD,CAC1BC,KAAMkB,EACNT,OA5BiB,SAACyB,EAAKC,GACjBhB,EAASD,EAAekB,QAAO,SAACC,EAAEC,GAAH,OAAOA,IAAIH,MAC1ClB,EAASD,EAAekB,IA0BfxB,MAAOM,KACtB,kBAACV,EAAA,EAAD,CAAQC,QAAQ,SAAS0B,KAAK,QAAQzB,QAzBnB,WACbM,EApBqB,IAqBrBC,EApBoB,IAqBpBI,EAASP,GACTK,EArBmB,KA0CzB,WCvCesB,MARf,WACE,OACE,yBAAKxC,UAAU,wBACb,kBAAC,EAAD,QCMcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.82bca1a2.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Button } from 'react-bootstrap'\r\n\r\nfunction ItemList(props) {\r\n    return (\r\n        <ul className=\"list-group text-center\">\r\n            <li className=\"list-group-item bg-info d-flex row text-light p-1\">\r\n               <div className='col'>Item Name</div> \r\n               <div className='col'>Amount</div>\r\n               <div className='col'>Total</div>\r\n           </li>\r\n           { props.name.map(({itemNameState,itemNumberState}, ind)=>\r\n           <li key={ind} className=\"list-group-item bg-info d-flex row text-light p-1 align-items-center\">\r\n               <div className='col'>{itemNameState}</div> \r\n               <div className='col'>{itemNumberState}</div>\r\n               <div className='col'><Button className='py-1'\r\n                variant='danger'\r\n                onClick={()=>props.delFun(itemNumberState,ind)}\r\n                >\r\n                   X\r\n               </Button></div>\r\n           </li>)}\r\n           <li className=\"list-group-item d-flex row text-light p-0\">\r\n               <div className='col'></div> \r\n               <div className='col'></div>\r\n    <div className='col bg-info p-1'>{props.total}</div>\r\n           </li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default ItemList\r\n","import React,{useState} from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport {Form, Col, Button} from 'react-bootstrap'\r\nimport ItemList from './ItemList'\r\n\r\nfunction Budget() {\r\n    const initialItemName= ''\r\n    const initialNumber = ''\r\n    const initialTotal = 0\r\n    const listArray =[]\r\n    const [itemNameState, setName]= useState(initialItemName)\r\n    const [itemNumberState, setNumber]= useState(initialNumber)\r\n    const [itemTotalState, setTotal]= useState(initialTotal)\r\n    const [itemArrayState, setArray]= useState(listArray)\r\n    const appendList=(e)=> {\r\n      itemNameState&&itemNumberState&&setArray([...itemArrayState,{itemNameState,itemNumberState}])\r\n      e.preventDefault()\r\n      setName(initialItemName)\r\n      setNumber(initialNumber)\r\n      setTotal(itemTotalState+Number(itemNumberState))\r\n    }\r\n    const delIt= (num, id)=>{\r\n      setArray(itemArrayState.filter((_,i)=>i!==id))\r\n      setTotal(itemTotalState-num)\r\n  }\r\n    const resetIt= ()=>{\r\n      setName(initialItemName)\r\n      setNumber(initialNumber)\r\n      setArray(listArray)\r\n      setTotal(initialTotal)\r\n    }\r\n    return (\r\n        <div className='container-fluid row d-flex justify-content-center'>\r\n<Form className='col-md-6 mb-5' onSubmit={appendList}>\r\n  <Form.Row>\r\n    <Col>\r\n      <Form.Control placeholder=\"Item Name\" value={itemNameState} onChange={e=>setName(e.target.value)} required/>\r\n    </Col>\r\n    <Col>\r\n      <Form.Control placeholder=\"Price\" value={itemNumberState} onChange={e=>setNumber(e.target.value)}  type='number' required/>\r\n    </Col>\r\n    {<Button variant=\"primary\" type='submit' >\r\n    Add\r\n    </Button>}\r\n  \r\n  </Form.Row>\r\n</Form>\r\n<div className='col-md-6'><ItemList \r\nname={itemArrayState} \r\ndelFun={delIt} total={itemTotalState}/></div>\r\n<Button variant=\"danger\" type='reset' onClick={resetIt}>\r\n    Reset\r\n  </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Budget\r\n","import React from 'react';\nimport Budget from './Budget';\n\nfunction App() {\n  return (\n    <div className=\"container-fluid mt-5\">\n      <Budget/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}